package Login;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;

public class newTransaction extends JFrame {

    /**
     * ************************************************************************
     */
    //Container components
    private Color background = new Color(41, 75, 110);
    private JPanel p = new JPanel(new BorderLayout(0, 0));
    private JPanel eastP = new JPanel() {

        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            GradientPaint gp = new GradientPaint(0, 0, getBackground().brighter(), 0, 900, getBackground().darker().darker());

            g2d.setPaint(gp);
            g2d.fillRect(0, 0, 1204 / 8, 770);

            super.paintComponent(g);
        }
    };
    private JPanel westP = new JPanel() {

        @Override
        protected void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            GradientPaint gp = new GradientPaint(0, 0, getBackground().brighter(), 0, 900, getBackground().darker().darker());

            g2d.setPaint(gp);
            g2d.fillRect(0, 0, 1204 / 8, 770);

            super.paintComponent(g);
        }
    };
    private JPanel centerP = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
    private int width = 1204, height = 750;
    /**
     * ************************************************************************
     */
    //West panel components
    private JButton inventoryB = new JButton("Inventory"),
            adminB = new JButton("Admin"),
            policeB = new JButton("Police & Gun"),
            configB = new JButton("Configuration"),
            supportB = new JButton("Support Info");
    private JLabel gapL = new JLabel();
    /**
     * ************************************************************************
     */
    //East panel components
    private JLabel[] fields = new JLabel[2];
    private JLabel field1L = new JLabel("Enhanced by"),
            field2L = new JLabel("Date Entered");
    private JLabel gap2 = new JLabel(),
            gap3 = new JLabel();
    /**
     * ************************************************************************
     */
    //Center panel components
    private JLabel titleL = new JLabel("New Transaction");
    private Dimension cmPanelDim = new Dimension(210, 25);
    private Border lb = BorderFactory.createEmptyBorder();
    private JTabbedPane transac = new JTabbedPane();
    private JPanel ticketsP = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 20));
    private JPanel checkoutP = new JPanel();
    private JRadioButton Tpawn = new JRadioButton("Pawn"),
            Tsale = new JRadioButton("Sale"),
            Tbuy = new JRadioButton("Buy"),
            Tlay = new JRadioButton("Layaway"),
            Tcon = new JRadioButton("Consignment"),
            Trep = new JRadioButton("Repair");
    private ButtonGroup rbbg = new ButtonGroup();
    private JPanel addP = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 8)),
            ticP = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
    private JRadioButton addMerch = new JRadioButton("Merchandise"),
            addJew = new JRadioButton("Jewelery"),
            addGun = new JRadioButton("Guns");
    private ButtonGroup addBg = new ButtonGroup();
    private JPanel merch = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 2));
    private JPanel jew = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 2));
    private JPanel g = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 2));
    private JLabel merchCategoryL = new JLabel("Item Category"),
            merchTypeL = new JLabel("Item Type"),
            merchMakeL = new JLabel("Make"),
            merchModelL = new JLabel("Model"),
            merchSerialL = new JLabel("Serial Number"),
            merchDetailsL = new JLabel("Details"),
            merchAmountL = new JLabel("Pawn Amount");
    private JComboBox merchCategoryF = new JComboBox(),
            merchTypeF = new JComboBox(),
            merchMakeF = new JComboBox(),
            merchModelF = new JComboBox();
    private JTextField merchSerialF = new JTextField(),
            merchDetailsF = new JTextField(),
            merchAmountF = new JTextField();
    private JLabel jewTypeL = new JLabel("Type"),
            jewStyleL = new JLabel("Style"),
            jewMetalL = new JLabel("Metal"),
            jewKaratL = new JLabel("Karat"),
            jewSizeL = new JLabel("Size"),
            jewStonesL = new JLabel("Stones"),
            jewDetailL = new JLabel("Details"),
            jewAmountL = new JLabel("Pawn Amount");
    private JComboBox jewTypeF = new JComboBox(),
            jewStyleF = new JComboBox(),
            jewMetalF = new JComboBox(),
            jewKaratF = new JComboBox();
    private JTextField jewSizeF = new JTextField(),
            jewStonesF = new JTextField(),
            jewDetailF = new JTextField(),
            jewAmountF = new JTextField();
    private JLabel gManuL = new JLabel("Manufacturer"),
            gImportL = new JLabel("Importer"),
            gTypeL = new JLabel("Type"),
            gModelL = new JLabel("Model"),
            gActionL = new JLabel("Action"),
            gFinishL = new JLabel("Finish"),
            gCondL = new JLabel("Condition"),
            gSerialL = new JLabel("Serial"),
            gDetailsL = new JLabel("Details"),
            gAmountL = new JLabel("Pawn Amount");
    private JComboBox gManuF = new JComboBox(),
            gImportF = new JComboBox(),
            gTypeF = new JComboBox(),
            gModelF = new JComboBox(),
            gActionF = new JComboBox(),
            gFinishF = new JComboBox(),
            gCondF = new JComboBox();
    private JTextField gSerialF = new JTextField(),
            gDetailsF = new JTextField(),
            gAmountF = new JTextField();
    private JLabel addAmountL = new JLabel("Pawn Amount");
    private JButton addTicketB = new JButton("Add to Ticket");
    private JPanel tpTicketsP = new JPanel(),
            tpTicketsItemsP = new JPanel();
    /**
     * ********<!--Blah-->*********
     */
    int x = 0;
    boolean bool = false;
    public Timer fonet = new Timer(1, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (bool) {
                p.setBounds(x, 0, width - (width / 8), height);
                x += 50;
                if (x == (50)) {
                    bool = false;
                    fonet.stop();
                }
            } else {
                centerP.setBounds(x, 0, width - (width / 8), height);
                x -= 50;
                if (x == (-1050)) {
                    bool = true;
                }
            }
        }
    });
    JLabel jlab = new JLabel(new ImageIcon("C:/Documents and Settings/root/My Documents/indexer.jpg"));
    JPanel cent = new JPanel(null);

    /**
     * ************************************************************************
     */
    public newTransaction() {
        getContentPane().add(MainPanel());
        setSize(width, height);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);
        setTitle("Lombard");
    }

    private JPanel MainPanel() {
        jlab.setBounds(0, 0, width- width/8, height);
        cent.add(CenterPanel());
        cent.add(jlab);

        p.add(EastPanel(), BorderLayout.EAST);
        p.add(WestPanel(), BorderLayout.WEST);
        p.add(cent, BorderLayout.CENTER);

        return p;
    }

    private JPanel Merchandise() {
        Dimension dim = new Dimension(180, 25);

        /*
         * merchCategoryL merchTypeL merchMakeL merchModelL merchSerialL
         * merchDetailsL
         */

        merchCategoryL.setForeground(Color.white);
        merchTypeL.setForeground(Color.white);
        merchMakeL.setForeground(Color.white);
        merchModelL.setForeground(Color.white);
        merchSerialL.setForeground(Color.white);
        merchDetailsL.setForeground(Color.white);
        merchAmountL.setForeground(Color.white);

        merchCategoryL.setPreferredSize(dim);
        merchTypeL.setPreferredSize(dim);
        merchMakeL.setPreferredSize(dim);
        merchModelL.setPreferredSize(dim);
        merchSerialL.setPreferredSize(new Dimension(350, 25));
        merchDetailsL.setPreferredSize(new Dimension(350, 25));
        merchAmountL.setPreferredSize(new Dimension(350, 25));

        merchCategoryF.setPreferredSize(dim);
        merchTypeF.setPreferredSize(dim);
        merchMakeF.setPreferredSize(dim);
        merchModelF.setPreferredSize(dim);
        merchSerialF.setPreferredSize(dim);
        merchDetailsF.setPreferredSize(new Dimension(370, 150));
        merchAmountF.setPreferredSize(new Dimension(150, 25));

        merchCategoryF.setBackground(Color.white);
        merchTypeF.setBackground(Color.white);
        merchMakeF.setBackground(Color.white);
        merchModelF.setBackground(Color.white);
        merchSerialF.setBackground(Color.white);
        merchDetailsF.setBackground(Color.white);

        merchCategoryL.setHorizontalAlignment(JLabel.LEFT);
        merchTypeL.setHorizontalAlignment(JLabel.LEFT);
        merchMakeL.setHorizontalAlignment(JLabel.LEFT);
        merchModelL.setHorizontalAlignment(JLabel.LEFT);
        merchSerialL.setHorizontalAlignment(JLabel.LEFT);
        merchDetailsL.setHorizontalAlignment(JLabel.LEFT);
        merchAmountL.setHorizontalAlignment(JLabel.LEFT);

        merchCategoryF.setBorder(lb);
        merchTypeF.setBorder(lb);
        merchMakeF.setBorder(lb);
        merchModelF.setBorder(lb);
        merchSerialF.setBorder(lb);
        merchDetailsF.setBorder(lb);
        merchAmountF.setBorder(lb);

        merch.add(merchCategoryL);
        merch.add(merchTypeL);
        merch.add(merchCategoryF);
        merch.add(merchTypeF);
        merch.add(merchMakeL);
        merch.add(merchModelL);
        merch.add(merchMakeF);
        merch.add(merchModelF);
        merch.add(merchSerialL);
        merch.add(merchSerialF);
        merch.add(merchDetailsL);
        merch.add(merchDetailsF);
        merch.add(merchAmountL);
        merch.add(merchAmountF);

        merch.setPreferredSize(new Dimension(390, 400));
        merch.setBackground(background);
        return merch;
    }

    private JPanel Jewel() {
        Dimension dim = new Dimension(180, 25);
        /*
         * jewTypeF jewStyleF jewMetalF jewKaratF jewSizeF jewStonesF jewDetailF
         * jewAmountF
         */
        jewTypeL.setPreferredSize(dim);
        jewStyleL.setPreferredSize(dim);
        jewMetalL.setPreferredSize(dim);
        jewKaratL.setPreferredSize(dim);
        jewSizeL.setPreferredSize(new Dimension(350, 25));
        jewStonesL.setPreferredSize(new Dimension(350, 25));
        jewDetailL.setPreferredSize(new Dimension(350, 25));
        jewAmountL.setPreferredSize(new Dimension(350, 25));

        jewTypeF.setPreferredSize(dim);
        jewStyleF.setPreferredSize(dim);
        jewMetalF.setPreferredSize(dim);
        jewKaratF.setPreferredSize(dim);
        jewSizeF.setPreferredSize(dim);
        jewStonesF.setPreferredSize(new Dimension(370, 70));
        jewDetailF.setPreferredSize(new Dimension(370, 50));
        jewAmountF.setPreferredSize(new Dimension(150, 25));

        jewTypeL.setHorizontalAlignment(JLabel.LEFT);
        jewStyleL.setHorizontalAlignment(JLabel.LEFT);
        jewMetalL.setHorizontalAlignment(JLabel.LEFT);
        jewKaratL.setHorizontalAlignment(JLabel.LEFT);
        jewSizeL.setHorizontalAlignment(JLabel.LEFT);
        jewStonesL.setHorizontalAlignment(JLabel.LEFT);
        jewDetailL.setHorizontalAlignment(JLabel.LEFT);
        jewAmountL.setHorizontalAlignment(JLabel.LEFT);

        jewTypeL.setForeground(Color.white);
        jewStyleL.setForeground(Color.white);
        jewMetalL.setForeground(Color.white);
        jewKaratL.setForeground(Color.white);
        jewSizeL.setForeground(Color.white);
        jewStonesL.setForeground(Color.white);
        jewDetailL.setForeground(Color.white);
        jewAmountL.setForeground(Color.white);

        jewTypeF.setBorder(lb);
        jewStyleF.setBorder(lb);
        jewMetalF.setBorder(lb);
        jewKaratF.setBorder(lb);
        jewSizeF.setBorder(lb);
        jewStonesF.setBorder(lb);
        jewDetailF.setBorder(lb);
        jewAmountF.setBorder(lb);

        jewTypeF.setBackground(Color.white);
        jewStyleF.setBackground(Color.white);
        jewMetalF.setBackground(Color.white);
        jewKaratF.setBackground(Color.white);
        jewSizeF.setBackground(Color.white);
        jewStonesF.setBackground(Color.white);
        jewDetailF.setBackground(Color.white);
        jewAmountF.setBackground(Color.white);

        jew.add(jewTypeL);
        jew.add(jewStyleL);
        jew.add(jewTypeF);
        jew.add(jewStyleF);
        jew.add(jewMetalL);
        jew.add(jewKaratL);
        jew.add(jewMetalF);
        jew.add(jewKaratF);
        jew.add(jewSizeL);
        jew.add(jewSizeF);
        jew.add(jewStonesL);
        jew.add(jewStonesF);
        jew.add(jewDetailL);
        jew.add(jewDetailF);
        jew.add(jewAmountL);
        jew.add(jewAmountF);

        jew.setPreferredSize(new Dimension(390, 400));
        jew.setBackground(background);
        return jew;
    }

    private JPanel Gun() {
        Dimension dim = new Dimension(180, 25);
        /*
         * gManuF gImportF gTypeF gModelF gActionF gFinishF gCondF gSerialF
         * gDetailsF gAmountF
         */
        gManuF.setBackground(Color.white);
        gImportF.setBackground(Color.white);
        gTypeF.setBackground(Color.white);
        gModelF.setBackground(Color.white);
        gActionF.setBackground(Color.white);
        gFinishF.setBackground(Color.white);
        gCondF.setBackground(Color.white);
        gSerialF.setBackground(Color.white);
        gDetailsF.setBackground(Color.white);
        gAmountF.setBackground(Color.white);

        gManuF.setBorder(lb);
        gImportF.setBorder(lb);
        gTypeF.setBorder(lb);
        gModelF.setBorder(lb);
        gActionF.setBorder(lb);
        gFinishF.setBorder(lb);
        gCondF.setBorder(lb);
        gSerialF.setBorder(lb);
        gDetailsF.setBorder(lb);
        gAmountF.setBorder(lb);

        gManuF.setPreferredSize(dim);
        gImportF.setPreferredSize(dim);
        gTypeF.setPreferredSize(dim);
        gModelF.setPreferredSize(dim);
        gActionF.setPreferredSize(dim);
        gFinishF.setPreferredSize(dim);
        gCondF.setPreferredSize(dim);
        gSerialF.setPreferredSize(dim);
        gDetailsF.setPreferredSize(new Dimension(370, 90));
        gAmountF.setPreferredSize(new Dimension(150, 25));

        gManuL.setForeground(Color.white);
        gImportL.setForeground(Color.white);
        gTypeL.setForeground(Color.white);
        gModelL.setForeground(Color.white);
        gActionL.setForeground(Color.white);
        gFinishL.setForeground(Color.white);
        gCondL.setForeground(Color.white);
        gSerialL.setForeground(Color.white);
        gDetailsL.setForeground(Color.white);
        gAmountL.setForeground(Color.white);

        gManuL.setHorizontalAlignment(JLabel.LEFT);
        gImportL.setHorizontalAlignment(JLabel.LEFT);
        gTypeL.setHorizontalAlignment(JLabel.LEFT);
        gModelL.setHorizontalAlignment(JLabel.LEFT);
        gActionL.setHorizontalAlignment(JLabel.LEFT);
        gFinishL.setHorizontalAlignment(JLabel.LEFT);
        gCondL.setHorizontalAlignment(JLabel.LEFT);
        gSerialL.setHorizontalAlignment(JLabel.LEFT);
        gDetailsL.setHorizontalAlignment(JLabel.LEFT);
        gAmountL.setHorizontalAlignment(JLabel.LEFT);

        gManuL.setPreferredSize(dim);
        gImportL.setPreferredSize(dim);
        gTypeL.setPreferredSize(dim);
        gModelL.setPreferredSize(dim);
        gActionL.setPreferredSize(dim);
        gFinishL.setPreferredSize(dim);
        gCondL.setPreferredSize(dim);
        gSerialL.setPreferredSize(dim);
        gDetailsL.setPreferredSize(new Dimension(350, 25));
        gAmountL.setPreferredSize(new Dimension(350, 25));

        g.add(gManuL);
        g.add(gImportL);
        g.add(gManuF);
        g.add(gImportF);
        g.add(gTypeL);
        g.add(gModelL);
        g.add(gTypeF);
        g.add(gModelF);
        g.add(gActionL);
        g.add(gFinishL);
        g.add(gActionF);
        g.add(gFinishF);
        g.add(gCondL);
        g.add(gSerialL);
        g.add(gCondF);
        g.add(gSerialF);
        g.add(gDetailsL);
        g.add(gDetailsF);
        g.add(gAmountL);
        g.add(gAmountF);

        g.setPreferredSize(new Dimension(390, 400));
        g.setBackground(background);
        return g;
    }

    private JPanel ticPtickets() {

        return tpTicketsP;
    }

    private JPanel ticPticketsI() {

        return tpTicketsItemsP;
    }

    private JPanel TicketsPanel() {
        JPanel rbPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 6, 6));
        rbPanel.setBorder(BorderFactory.createLineBorder(Color.lightGray, 1));
        rbPanel.setBackground(Color.lightGray);
        JPanel rbPanel2 = new JPanel(new FlowLayout(FlowLayout.CENTER, 6, 6));
        rbPanel2.setBorder(BorderFactory.createLineBorder(Color.lightGray, 1));
        rbPanel2.setBackground(Color.lightGray);
        Dimension rbDim = new Dimension(135, 25);
        Dimension rbDim2 = new Dimension(121, 25);
        TitledBorder tb1 = BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.white, 2));
        tb1.setTitleColor(Color.white);
        tb1.setTitle("Add Pawn Item");
        tb1.setTitleFont(new Font("Arial", Font.BOLD, 13));
        TitledBorder tb2 = BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.white, 2));
        tb2.setTitleColor(Color.white);
        tb2.setTitle("Tickets");
        tb2.setTitleFont(new Font("Arial", Font.BOLD, 13));
        Dimension addFieldDim = new Dimension(155, 25);
        Tpawn.setBackground(background);
        Tpawn.setForeground(Color.white);
        Tpawn.setPreferredSize(rbDim);
        Tsale.setBackground(background);
        Tsale.setForeground(Color.white);
        Tsale.setPreferredSize(rbDim);
        Tbuy.setBackground(background);
        Tbuy.setForeground(Color.white);
        Tbuy.setPreferredSize(rbDim);
        Tlay.setBackground(background);
        Tlay.setForeground(Color.white);
        Tlay.setPreferredSize(rbDim);
        Tcon.setBackground(background);
        Tcon.setForeground(Color.white);
        Tcon.setPreferredSize(rbDim);
        Trep.setBackground(background);
        Trep.setForeground(Color.white);
        Trep.setPreferredSize(rbDim);

        rbbg.add(Tpawn);
        rbbg.add(Tsale);
        rbbg.add(Tbuy);
        rbbg.add(Tlay);
        rbbg.add(Tcon);
        rbbg.add(Trep);

        rbPanel.add(Tpawn);
        rbPanel.add(Tsale);
        rbPanel.add(Tbuy);
        rbPanel.add(Tlay);
        rbPanel.add(Tcon);
        rbPanel.add(Trep);

        addP.setBorder(tb1);
        addP.setBackground(background);
        addP.setPreferredSize(new Dimension(421, 520));
        ticP.setBorder(tb2);
        ticP.setBackground(background);
        ticP.setPreferredSize(new Dimension(421, 520));

        addMerch.setBackground(background);
        addMerch.setForeground(Color.white);
        addMerch.setPreferredSize(rbDim2);
        addJew.setBackground(background);
        addJew.setForeground(Color.white);
        addJew.setPreferredSize(rbDim2);
        addGun.setBackground(background);
        addGun.setForeground(Color.white);
        addGun.setPreferredSize(rbDim2);

        rbPanel2.add(addMerch);
        rbPanel2.add(addJew);
        rbPanel2.add(addGun);

        addBg.add(addMerch);
        addBg.add(addJew);
        addBg.add(addGun);

        addMerch.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                SwitchAdd(0);
            }
        });
        addJew.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                SwitchAdd(1);
            }
        });
        addGun.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                SwitchAdd(2);
            }
        });

        addMerch.setSelected(true);
        Jewel().setVisible(false);
        Gun().setVisible(false);

        addP.add(rbPanel2);
        addP.add(Merchandise());
        addP.add(Jewel());
        addP.add(Gun());

        addTicketB.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                fonet.start();
            }
        });
        addP.add(addTicketB);

        ticketsP.add(rbPanel);
        ticketsP.add(addP);
        ticketsP.add(ticP);
        ticketsP.setBackground(new Color(41, 75, 110, 75));
        //ticketsP.setBackground(background);
        
        return ticketsP;
    }

    private void SwitchAdd(int a) {
        switch (a) {
            case 0:
                Jewel().setVisible(false);
                Gun().setVisible(false);
                Merchandise().setVisible(true);
                break;
            case 1:
                Jewel().setVisible(true);
                Gun().setVisible(false);
                Merchandise().setVisible(false);
                break;
            case 2:
                Jewel().setVisible(false);
                Gun().setVisible(true);
                Merchandise().setVisible(false);
                break;
        }
    }

    private JPanel CenterPanel() {
        centerP.setLayout(null);

        centerP.add(titleL);
        titleL.setFont(new Font("Arial", Font.BOLD, 30));
        titleL.setForeground(Color.white);
        titleL.setBounds(15, 10, width - (width / 8), 35);
        titleL.setVerticalAlignment(JLabel.TOP);

        transac.setBounds(10, 75, 880, height - 110);

        transac.addTab("Tickets", TicketsPanel());
        
        centerP.setBounds(0, 0, width - (width / 8), height);
        centerP.setBackground(new Color(41, 75, 110, 125));

        
        centerP.add(transac);
        return centerP;
    }

    private JPanel EastPanel() {
        Dimension fieldDim = new Dimension(108, 29);
        eastP.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 0));
        eastP.setBackground(new Color(20, 75, 120));
        eastP.setPreferredSize(new Dimension(width / 8, height));
        eastP.setOpaque(false);
        eastP.setBorder(BorderFactory.createLineBorder(Color.black));

        gap2.setPreferredSize(new Dimension(110, 100));
        gap3.setPreferredSize(new Dimension(110, 25));

        for (int i = 0; i < fields.length; i++) {
            fields[i] = new JLabel();
            fields[i].setPreferredSize(fieldDim);
            fields[i].setIcon(new ImageIcon("C:\\Documents and Settings\\root\\My Documents\\textfield.jpg"));
        }

        field1L.setForeground(Color.white);
        field2L.setForeground(Color.white);

        field1L.setPreferredSize(fieldDim);
        field2L.setPreferredSize(fieldDim);

        field1L.setHorizontalAlignment(JLabel.LEFT);
        field2L.setHorizontalAlignment(JLabel.LEFT);

        eastP.add(gap2);
        eastP.add(field1L);
        eastP.add(fields[0]);
        eastP.add(gap3);
        eastP.add(field2L);
        eastP.add(fields[1]);

        return eastP;
    }

    private JPanel WestPanel() {
        Dimension buttonDim = new Dimension(110, 35);
        westP.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 25));
        westP.setBackground(new Color(20, 75, 120));
        westP.setPreferredSize(new Dimension(width / 8, height));
        westP.setOpaque(false);
        westP.setBorder(BorderFactory.createLineBorder(Color.black));

        inventoryB.setPreferredSize(buttonDim);
        adminB.setPreferredSize(buttonDim);
        policeB.setPreferredSize(buttonDim);
        configB.setPreferredSize(buttonDim);
        gapL.setPreferredSize(new Dimension(120, 350));
        supportB.setPreferredSize(new Dimension(130, 70));
        /*
         * supportB.setBorder(BorderFactory.createEmptyBorder());
         * supportB.setBackground(new Color(81, 109, 137).brighter());
         * supportB.setForeground(Color.white);
         */
        //supportB.setBackground(new Color(41, 75, 250));
        supportB.setBorder(new LineBorder(new Color(20, 75, 120).darker(), 15, true));
        supportB.setFont(new Font("Arial", Font.BOLD, 15));
        supportB.setContentAreaFilled(true);
        supportB.setBorderPainted(true);

        westP.add(inventoryB);
        westP.add(adminB);
        westP.add(policeB);
        westP.add(configB);
        westP.add(gapL);
        westP.add(supportB);

        return westP;
    }

    public static void main(String[] args) {
        new Login.newTransaction().setVisible(true);
    }
}